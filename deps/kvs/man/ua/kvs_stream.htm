<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="description" content="" />
<meta name="author" content="Maxim Sokhatsky" />
<title>STREAM</title>
<link rel="stylesheet" href="https://n2o.dev/blank.css" />
<link rel="shortcut icon" type="image/x-icon" href="/img/favicon.ico" />
<link rel="apple-touch-icon" sizes="180x180" href="/img/apple-touch-icon.png" />
<link rel="icon" type="image/png" sizes="32x32" href="/img/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/img/favicon-16x16.png" />
<link rel="manifest" href="/img/site.webmanifest" />
</head>
<body>
<nav>
  <a href="https://n2o.dev/ua/">DEV</a>
  <a href="index.html">KVS</a>
  <a href="#" style="background:#ededed;">STREAM</a>
  <div class="dropdown">
    <a onclick="drop()" class="dropbtn">UA</a>
    <div id="dropdown" class="dropdown-content">
      <a href="https://kvs.n2o.space/man/kvs_stream.htm">EN</a>
      <a href="kvs_stream.htm">UA</a>
    </div>
  </div>
</nav>
<header>
  <a href="index.html"><img src="https://n2o.space/img/Synrc Neo.svg" /></a>
  <h1>STREAM</h1>
</header>
<main>
<article>
  <section>
    <h3>ВСТУП</h3>
    <p>Модуль STREAM пропонує інтерфейс фолдів, акумуляторів за персистентного зберігання ланцюжків даних.</p>
    <blockquote>
    <ul>
      <li><b><a href="#writer">writer/1</a></b> — створює та повертає курсор запису до бази даних.</li>
      <li><b><a href="#reader">reader/1</a></b> — створює та повертає курсор зчитування до бази даних.</li>
      <li><b><a href="#save">save/1</a></b> — зберігає курсор до бази даних.</li>
      <li><b><a href="#load">load_reader/1</a></b> — підзавантажує збережений курсор зчитування.</li>
      <li><b><a href="#load">load_writer/1</a></b> — підзавантажує збережений курсор запису.</li>
      <li><b><a href="#top">top/1</a></b> — повертає початок (вершину) ланцюжка.</li>
      <li><b><a href="#bot">bot/1</a></b> — повертає закінчення (основу) ланцюжка.</li>
      <li><b><a href="#next">next/1</a></b> — переміщає курсор зчитування на наступний елемент.</li>
      <li><b><a href="#prev">prev/1</a></b> — переміщає курсор зчитування на попередній елемент.</li>
      <li><b><a href="#take">take/1</a></b> — повертає N елементів з курсору зчитування.</li>
      <li><b><a href="#drop">drop/1</a></b> — пропускає N елементів з курсору зчитування.</li>
      <li><b><a href="#add">add/1</a></b> — додає елемент до списку.</li>
      <li><b><a href="#append">append/2</a></b> — додає елемент в канал.</li>
      <li><b><a href="#append">cut/2</a></b> — очищає канал до заданої мітки timestamp.</li>
    </ul>
    </blockquote>
    <p>Ви може взяти <a style="margin-bottom:30px;" href="https://raw.githubusercontent.com/synrc/kvs/master/src/kvs_stream.erl">kvs_stream</a>
      і використовувати у своїх додатках без імпортування залежності <b>synrc/kvs</b>,
      оскільки даний модуль є самодостатнім.
      Додатками можуть бути: публічні та приватні канали/стрічки новин, FIFO черги,
      непрочитані повідомлення, чат, блокчейн etc.<br/><br/></p>
  </section>
  <section>
    <h3>WRITER</h3>
    <p>Курсор запису передставляє собою додавання деяких кешованих значень до списку-ланцюжка.
      Наприклад, розмір ланцюжка, перший елемент ланцюжка, кешоване значення
      попереднього записаного повідомлення, та поле для передачі аргументів stream функціям, таким, як add.</p>
    <figure>
      <code>
  -record(writer, { id    = [] :: term(),
                    count =  0 :: integer(),
                    cache = [] :: [] | tuple(),
                    args  = [] :: term(),
                    first = [] :: [] | tuple() } ).
      </code>
    </figure>
    <p>Щоб додати дані до бази даних, спочатку потрібно створити курсор запису,
      встановити запис з мета-інформацією в поле аргументів, та викликати функцію save.</p>
    <figure>
      <figcaption>Створює курсор запису</figcaption>
      <code>
  writer(term()) -&#62; #writer{}.
      </code>
    </figure>
    <figure>
      <figcaption>Додає елемент до списку, на який вказує курсор запису</figcaption>
      <code>
  add(#writer{}) -&#62; #writer{}.
      </code>
    </figure>
    <figure>
      <figcaption>Підзавантажує курсор запису</figcaption>
      <code>
  load_writer(#writer{}) -&#62; #writer{}.
      </code>
    </figure>
    <figure>
      <figcaption>Переміщує курсор запису до бази даних</figcaption>
      <code>
  save(#writer{}) -&#62; #writer{}.
      </code>
    </figure>
  </section>
  <section>
    <h3>READER</h3>
    <figure>
      <figcaption>Курсор зчитування</figcaption>
      <code>
  -record(reader, { id    = [] :: integer(),
                    pos   =  0 :: [] | integer(),
                    cache = [] :: [] | integer(),
                    args  = [] :: term(),
                    feed  = [] :: term(),
                    dir   =  0 :: 0 | 1 } ).
      </code>
    </figure>
    <figure>
      <figcaption>Створює курсор зчитування</figcaption>
      <code>
  reader(integer()) -&#62; #reader{}.
      </code>
    </figure>
    <figure>
      <figcaption>Підзавантажує курсор зчитування з бази даних</figcaption>
      <code>
  load_reader(#reader{}) -&#62; #reader{}.
      </code>
    </figure>
    <figure>
      <figcaption>Переміщує курсор зчитування до бази даних</figcaption>
      <code>
  save(#reader{}) -&#62; #reader{}.
      </code>
    </figure>
    <figure>
      <figcaption>Переміщає курсор в початок (вершину) списку</figcaption>
      <code>
  top(#reader{}) -&#62; #reader{}.
      </code>
    </figure>
    <figure>
      <figcaption>Переміщає курсор в закінчення (основу) списку</figcaption>
      <code>
  bot(#reader{}) -&#62; #reader{}.
      </code>
    </figure>
  </section>
  <section>
    <h3>ITER</h3>
    <figure>
      <figcaption>KVS Stream Iterator</figcaption>
      <code>
  -record(iter,  { id    = [] :: [] | integer(),
                   next  = [] :: [] | integer(),
                   prev  = [] :: [] | integer() } ).
      </code>
    </figure>
    <figure>
      <figcaption></figcaption>
      <code>
  next(#reader{}) -&#62; #reader{}.
      </code>
    </figure>
    <p>Переміщає курсор на наступний елемент. Споживає дані з вершини.
      Повертає помилку, якщо список є пустим, в іншому випадку — наступний чи останній елемент.</p>
    <figure>
      <figcaption></figcaption>
      <code>
  prev(#reader{}) -&#62; #reader{}.
      </code>
    </figure>
    <p>Переміщає курсор на попередній елемент. Споживає дані з основи.
      Повертає помилку, якщо список є пустим, в іншому випадку — наступний чи останній елемент.</p>
    <figure>
      <figcaption>Пропускає N елементів, розпочинаючи з курсора</figcaption>
      <code>
  drop(#reader{}) -&#62; #reader{}.
      </code>
    </figure>
    <figure>
      <figcaption></figcaption>
      <code>
  take(#reader{}) -&#62; #reader{}.
      </code>
    </figure>
    <p>Пробує споживати N записів зі stream, використовуючи його поточне значення та напрям.
      Повертає споживані дані. Зазвичай ви шукаєте певну позицію, і далі споживаєте деякі дані.</p>
  </section>
  <section>
    <p>Цей модуль може бути пов'язаним з:
      <a href="kvs.htm"><b>kvs</b></a>,
      <a href="kvs_st.htm"><b>kvs_st</b></a>.
    </p>
  </section>
</article>
</main>
<footer>2005—2019 © Synrc Research Center</footer>
<script>function drop(){document.getElementById("dropdown").classList.toggle("show");}</script>
</body>
</html>
