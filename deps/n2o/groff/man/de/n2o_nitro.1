.TH n2o_nitro 1 "n2o_nitro" "Synrc Research Center" "NITRO"
.SH NAME
n2o_nitro

.SH INTRO
.LP
The
\fIn2o_nitro\fR\& module provides
\fINitrogen Web Framework\fR\& protocol specification and implementation.

.SH INIT
.LP
Init message invokes event(init) function in page module.
There are two binary representations of INIT message.
The first one is BERT encoded #init record with binary
token that usually issued by n2o_session, transported in #io record
as data parameter and stored on client side in localStorage or Key Chain.
Clients with invalid tokens are being registered and reissued.
.nf
-record(init, { token :: binary() }).
.fi
.LP
The second one is TEXT encoded version of message,
<
<"N2O,"
>
>
that usually works for hosts with raw binary falicities as WebSockets.
.nf
.fi
<
<"N2O,",Token/binary>>
.LP
For token issue protocol see
\fIn2o_session\fR\& module.

.SH PICKLE
.LP
Pickle message sends to server prerendered (by server) encripted message.
These messages hold #ev record with callee information (encripted).
Pickled messaged can prolongate expiration field in session token (renewed)
by updating client token on each UI request (tracking user activity) when
n2o application variable
nitro_prolongate
equals
true
.
.nf
-record(pickle, { source  = [] :: [] | binary(),
pickled = [] :: [] | binary(),
args    = [] :: list({atom(),any()}) }).
-record(ev,     { module  = [] :: [] | atom(),
msg     = [] :: any(),
trigger = [] :: [] | binary(),
name    = [] :: [] | binary() }).
.fi

.SH DIRECT
.LP
Direct message sends data without any convertation or encription or session logic.
.nf
-record(direct, { data = [] :: any() }).
.fi

.SH FLUSH
.LP
Flush message only redirects data to the socket.
.nf
-record(flush, { data = [] :: [] | list(#action{}) }).
.fi

.SH ALSO
.LP
\fB\fIn2o_heart(1)\fR\&\fR\&, \fB\fIn2o_ftp(1)\fR\&\fR\&